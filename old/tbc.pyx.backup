#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Tight binding Cython module
by Daniel Jung
This is Cython code, containing some functions that are originally from the
pure Python module tb, but are considered performance-critical. The hope is
that Cython can speed them up considerably."""
# 14/04/2011-17/05/2011
import cython as cy
import numpy as np
cimport numpy as np
import scipy.integrate as ig

# Maybe use:
# from libc.stdlib cimport malloc, free
# data = <int*>malloc(max_size *size)
# free(data)

### What is this good for?
cdef extern from "numpy/arrayobject.h":
    ctypedef int intp
    ctypedef extern class numpy.ndarray[object PyArrayObject]:
        cdef char *data
        cdef int nd
        cdef intp *shape
        cdef intp *strides
        cdef int flags

# Get trigonometric and squareroot functions
cdef extern from "math.h":
  double sin(double)
  double cos(double)
  double tan(double)
  double sqrt(double)
  #float pi "M_PI"

# Define fast min and max functions
# Source: http://wiki.cython.org/tutorials/numpy
cdef inline double dmax(double a, double b): return a if a >= b else b
cdef inline double dmin(double a, double b): return a if a <= b else b
cdef inline int imax(int a, int b): return a if a >= b else b
cdef inline int imin(int a, int b): return a if a <= b else b

# Define function for peak-to-peak value
cdef double ptp(double *vect, unsigned int length):
  cdef unsigned int n
  cdef double mini, maxi
  #cdef double *vect = <double*>vector.data
  mini = vect[0]
  maxi = vect[0]
  for n in range(1, length):
    mini = dmin(mini, vect[n])
    maxi = dmax(maxi, vect[n])
  return maxi-mini

#@cy.boundscheck(False)
#@cy.wraparound(False)
#@cy.profile(False)
@cy.cdivision(True)
def kpm_dos(  ndarray[double] data,
              ndarray[int] indices,
              ndarray[int] indptr,
              unsigned int enum,
              unsigned int rnum=1,
              unsigned int limit=100,
              double tol=.01,
              unsigned int nenerg=0):
  """KPM algorithm for calculating the density of states, using the stochastic
  evaluation method with random-phase vectors.

  Future visions:
  - use complex random vectors? Would have to change the data type to complex,
    and add complex conjugates at certain points."""
  # 08/06/2011-16/06/2011

  # Make sure limit is even (for the sake of simplicity)
  assert limit > 0 and limit % 2 == 0, 'bad truncation limit: %i. Must be positive even integer' % limit
  assert rnum > 0, 'bad number of random vectors: %i. Must be positive integer' % rnum

  # Determine energy discretization
  if nenerg == 0:
    nenerg = limit*2

  # Get matrix
  cdef double *dat = <double*>data.data
  cdef int *ind = <int*>indices.data
  cdef int *ptr = <int*>indptr.data

  # Initialize vectors
  cdef ndarray[double] ophi0 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi1 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi2 = np.zeros(enum, dtype=float)
  cdef double *phi0 = <double*>ophi0.data
  cdef double *phi1 = <double*>ophi1.data
  cdef double *phi2 = <double*>ophi2.data
  cdef double *phitemp = <double*>ophi0.data

  # Initialize moments
  cdef ndarray[double] omu  = np.zeros(limit, dtype=float) # Holding moments
  cdef double *mu = <double*>omu.data

  # Initialize LDOS
  cdef ndarray[double] orho = np.zeros(nenerg, dtype=float) # Holding DOS
  cdef double *rho = <double*>orho.data

  # Initialize discretized energy axis
  cdef ndarray[double] oenerg = np.zeros(nenerg, dtype=float)
  cdef double *energ = <double*>oenerg.data

  # Define pi
  cdef double pi = 3.141592653589793

  # Initialize loop and temporary variables
  cdef unsigned int e, i, j, n, r
  cdef double mu0, mu1

  for r in range(rnum):
    # Construct random vector
    for i in range(enum):
      phi0[i] = 0.
    ophi0 += np.cos(np.random.rand(enum)*pi) #*2
    ophi0 /= np.sqrt(np.sum(ophi0**2))
    #print 'ophi0 =', ophi0, '  len = ', np.sqrt(np.sum(ophi0**2))

    # Calculate first two orders of the expansion
    mu0 = 0.
    mu1 = 0.
    for i in range(enum):
      #print 'i, phi0[i] =', i, phi0[i]
      # Calculate moment 0
      mu0 += phi0[i]*phi0[i]

      # Perform matrix-vector multiplication
      phi1[i] = 0.
      for j in range(ptr[i], ptr[i+1]):
        phi1[i] += dat[j]*phi0[ind[j]]

      # Calculate moment 1
      mu1 += phi1[i]*phi0[i]
    mu[0] += mu0
    mu[1] += mu1
    #print 'mu[0] =', omu[0]
    #print 'mu[1] =', omu[1]

    # Main iteration loop
    for n in range(1, limit/2):
      #print 'n =', n
      for i in range(enum):
        #print 'i =', i
        # Perform matrix-vector multiplication
        phi2[i] = 0. # Important, because content is different from zero after each loop
        for j in range(ptr[i], ptr[i+1]):
          phi2[i] += 2.*dat[j]*phi1[ind[j]]
        phi2[i] -= phi0[i]

        # Calculate moments, part 1/2
        mu[2*n] += 2.*phi1[i]*phi1[i]
        mu[2*n+1] += 2.*phi2[i]*phi1[i]

      # Calculate moments, part 2/2
      mu[2*n] -= mu0
      mu[2*n+1] -= mu1

      # Permute vector pointers circular
      phitemp = phi0
      phi0 = phi1
      phi1 = phi2
      phi2 = phitemp

  # To average the moments over the different random vectors, we still have to
  # divide by the number of random vectors
  for n in range(limit):
    mu[n] /= rnum

  #print 'mu =', omu

  # Apply kernel
  for n in range(limit):
    mu[n] *= ((limit-n+1)*cos(pi*n/(limit+1))+sin(pi*n/(limit+1))/tan(pi/(limit+1)))/(limit+1)

  #print 'mu_k =', omu

  # Construct density of states
  for e in range(nenerg):
    energ[e] = cos(pi*(2*e+1)/2/nenerg)
    rho[e] = mu[0]
    for n in range(1, limit):
      rho[e] += mu[n]*cos(n*pi*(2*e+1)/2/nenerg)*2
    rho[e] /= pi*sqrt(1-energ[e]**2)

  # 16/06/2011
  # Normalize result (why the heck isn't it normalized for rnum > 1?)
  orho /= np.abs(ig.trapz(orho, oenerg))

  # Return results
  return oenerg[::-1], orho[::-1], omu, limit






#@cy.boundscheck(False)
#@cy.wraparound(False)
#@cy.profile(False)
@cy.cdivision(True)
def kpm_dosBackup(  ndarray[double] data,
              ndarray[int] indices,
              ndarray[int] indptr,
              unsigned int enum,
              unsigned int limit=100,
              double tol=.01,
              unsigned int nenerg=0):
  """KPM algorithm for calculating the density of states, using the stochastic
  evaluation method with random-phase vectors."""
  # 08/06/2011

  # Make sure limit is even (for the sake of simplicity)
  assert limit > 0 and limit % 2 == 0, 'bad truncation limit: %i. Must be positive even integer' % limit

  # Determine energy discretization
  if nenerg == 0:
    nenerg = limit*2

  # Get matrix
  cdef double *dat = <double*>data.data
  cdef int *ind = <int*>indices.data
  cdef int *ptr = <int*>indptr.data

  # Initialize vectors
  cdef ndarray[double] ophi0 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi1 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi2 = np.zeros(enum, dtype=float)

  # Initialize moments
  cdef ndarray[double] omu  = np.zeros(limit, dtype=float) # Holding moments
  cdef double *mu = <double*>omu.data

  # Initialize LDOS
  cdef ndarray[double] orho = np.zeros(nenerg, dtype=float) # Holding DOS
  cdef double *rho = <double*>orho.data

  # Initialize discretized energy axis
  cdef ndarray[double] oenerg = np.zeros(nenerg, dtype=float)
  cdef double *energ = <double*>oenerg.data

  # Define pi
  cdef double pi = 3.141592653589793

  # Initialize loop and temporary variables
  cdef unsigned int e, i, j, n, trunc

  # Construct random vector
  ophi0 = np.cos(np.random.rand(enum)*2*pi)
  ophi0 /= np.sqrt(np.sum(ophi0**2))
  #print 'ophi0 =', ophi0
  cdef double *phi0 = <double*>ophi0.data
  cdef double *phi1 = <double*>ophi1.data
  cdef double *phi2 = <double*>ophi2.data
  cdef double *phitemp = <double*>ophi0.data

  # Calculate first two orders of the expansion
  for i in range(enum):
    #print 'i, phi0[i] =', i, phi0[i]
    # Calculate moment 0
    mu[0] += phi0[i]*phi0[i]

    # Perform matrix-vector multiplication
    for j in range(ptr[i], ptr[i+1]):
      phi1[i] += dat[j]*phi0[ind[j]]

    # Calculate moment 1
    mu[1] += phi1[i]*phi0[i]

  #print 'mu[0] =', omu[0]
  #print 'mu[1] =', omu[1]

  # Main iteration loop
  for n in range(1, limit/2):
    #print 'n =', n
    for i in range(enum):
      #print 'i =', i
      # Perform matrix-vector multiplication
      phi2[i] = 0. # Important, because content is different from zero after each loop
      for j in range(ptr[i], ptr[i+1]):
        phi2[i] += 2.*dat[j]*phi1[ind[j]]
      phi2[i] -= phi0[i]

      # Calculate moments, part 1/2
      mu[2*n] += 2.*phi1[i]*phi1[i]
      mu[2*n+1] += 2.*phi2[i]*phi1[i]

    # Calculate moments, part 2/2
    mu[2*n] -= mu[0]
    mu[2*n+1] -= mu[1]

    # Permute vector pointers circular
    phitemp = phi0
    phi0 = phi1
    phi1 = phi2
    phi2 = phitemp

  #print 'mu =', omu

  # Apply kernel
  for n in range(limit):
    mu[n] *= ((limit-n+1)*cos(pi*n/(limit+1))+sin(pi*n/(limit+1))/tan(pi/(limit+1)))/(limit+1)

  #print 'mu_k =', omu

  # Construct density of states
  for e in range(nenerg):
    energ[e] = cos(pi*(2*e+1)/2/nenerg)
    rho[e] = mu[0]
    for n in range(1, limit):
      rho[e] += mu[n]*cos(n*pi*(2*e+1)/2/nenerg)*2
    rho[e] /= pi*sqrt(1-energ[e]**2)

  # Return results
  return oenerg[::-1], orho[::-1], omu, limit







##@cy.boundscheck(False)
##@cy.wraparound(False)
##@cy.profile(False)
@cy.cdivision(True)
def kpm_ldos( ndarray[double] data,
              ndarray[int] indices,
              ndarray[int] indptr,
              unsigned int enum,
              unsigned int state=0,
              unsigned int limit=100,
              unsigned int step=10,
              double tol=.01,
              unsigned int nenerg=0):
  """KPM algorithm for calculating the LDOS for one state of the site-
  occupation basis, with optional convergence criterion for the truncation of
  the Chebychev series.

  Definition:

  def kpm_ldos( ndarray[double] data,    # csr_matrix.data
                ndarray[int] indices,    # csr_matrix.indices
                ndarray[int] indptr,     # csr_matrix.indptr
                unsigned int enum,       # csr_matrix.shape[0]
                unsigned int state=0,    # Defines start vector
                                         # (vect[state] = 1., all other zero)
                unsigned int limit=8000, # maximum truncation number
                unsigned int step=100,   # step width after which criterion
                                         # is checked again. If step == 0, no
                                         # abort criterion is used.
                double tol=.01,          # tolerance that has to be underrun
                                         # to fulfill the convergence
                                         # criterion
                unsigned int nenerg=0)   # number of energy intervals used for
                                         # the discretization of the energy
                                         # axis when reconstructing the LDOS.
                                         # If nenerg is zero, set
                                         # nenerg = limit*2.

  Returns:

  energ  : array with shape (nenerg,)
  rho    : array with shape (nenerg,)
  mu     : array with shape (trunc,)
  trunc  : positive integer

  Remarks:

  The criterion is chosen to be the peak-to-peak value of all newly calculated
  series terms at all energies. If this peak-to-peak value underruns a certain
  tolerance value (tol), the series is truncated. The energy discretization
  for the final result is always chosen to be cos(pi*(2*e+1)/4/limit), where e
  is range(2*limit). In this way, the resulting vectors energ and rho always
  have the same length, regardless of the truncation of each series, and it is
  always guaranteed that it is greater than the truncation number.
  """
  # 05/05/2011-17/05/2011
  assert step == 0, 'abort criterion not yet working'

  if step == 0 or step > limit-2:
    # Do not use a convergence criterion
    step = limit-2
  if nenerg == 0:
    nenerg = limit*2

  # Make sure certain parameters are even (for the sake of simplicity)
  assert limit > 0 and limit % 2 == 0, 'bad truncation limit: %i. Must be positive even integer' % limit
  assert step > 0 and step % 2 == 0, 'bad step width: %i. Must be positive even integer' % step

  # Get matrix
  cdef double *dat = <double*>data.data
  cdef int *ind = <int*>indices.data
  cdef int *ptr = <int*>indptr.data

  # Initialize vectors
  cdef ndarray[double] ophi0 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi1 = np.zeros(enum, dtype=float)
  cdef ndarray[double] ophi2 = np.zeros(enum, dtype=float)
  cdef double *phi0 = <double*>ophi0.data
  cdef double *phi1 = <double*>ophi1.data
  cdef double *phi2 = <double*>ophi2.data
  cdef double *phitemp = <double*>ophi0.data

  # Initialize moments
  cdef ndarray[double] omu  = np.zeros(limit, dtype=float) # Holding moments without kernel applied
  cdef ndarray[double] omu0 = np.zeros(limit, dtype=float) # Holding moments with kernel applied, old truncation number
  cdef ndarray[double] omu1 = np.zeros(limit, dtype=float) # Holding moments with kernel applied, new truncation number
  cdef double *mu  = <double*>omu.data
  cdef double *mu0 = <double*>omu0.data
  cdef double *mu1 = <double*>omu1.data

  # Initialize LDOS
  cdef ndarray[double] orho0 = np.zeros(nenerg, dtype=float) # Holding LDOS, old truncation number
  cdef ndarray[double] orho1 = np.zeros(nenerg, dtype=float) # Holding LDOS, new truncation number
  cdef double *rho0 = <double*>orho0.data
  cdef double *rho1 = <double*>orho1.data

  # Initialize discretized energy axis
  cdef ndarray[double] oenerg = np.zeros(nenerg, dtype=float) #imax(limit*2, nenerg)
  cdef double *energ = <double*>oenerg.data

  # Initialize loop and temporary variables
  cdef unsigned int e, i, j, m, n, muind, trunc0 = 2, trunc1 = 2, breakloop = 0 #Py_ssize_t
  cdef double delta, en, ptpeak

  # Initialize summands and ptp arrays
  cdef ndarray[double] osumm = np.zeros(step, dtype=float)
  cdef double *summ = <double*>osumm.data
  #cdef ndarray[double] optps = np.zeros(limit*2, dtype=float)
  #cdef double *ptps = <double*>optps.data
  cdef double maxptp

  # Define pi
  cdef double pi = 3.141592653589793

  # Calculate first two orders of the expansion
  phi0[state] = 1.
  for i in range(enum):
    # Calculate moment 0
    mu[0] += phi0[i]*phi0[i]

    # Perform matrix-vector multiplication
    for j in range(ptr[i], ptr[i+1]):
      phi1[i] += dat[j]*phi0[ind[j]]

    # Calculate moment 1
    mu[1] += phi1[i]*phi0[i]

  # Main iteration loop
  cdef unsigned int nstep = (limit-2)/step # Number of steps (without rest)
  cdef unsigned int rest = (limit-2) % step
  #print 'limit = %i   step = %i   nstep = %i   rest = %i' % (limit, step, nstep, rest)
  for n in range(nstep):
    for m in range(step/2):
      muind = 2+n*step+m*2

      for i in range(enum):
        # Perform matrix-vector multiplication
        phi2[i] = 0. # Important, because content is different from zero after each loop
        for j in range(ptr[i], ptr[i+1]):
          phi2[i] += 2.*dat[j]*phi1[ind[j]]
        phi2[i] -= phi0[i]

        # Calculate moments, part 1/2
        mu[muind] += 2.*phi1[i]*phi1[i]
        mu[muind+1] += 2.*phi2[i]*phi1[i]

      # Calculate moments, part 2/2
      mu[muind] -= mu[0]
      mu[muind+1] -= mu[1]

      # Shift vectors (permute pointers circular)
      phitemp = phi0
      phi0 = phi1
      phi1 = phi2
      phi2 = phitemp
      #print 'muind = %i   mu[%i] = %.2f   mu[%i] = %.2f' % (muind, muind, mu[muind], muind+1, mu[muind+1])

    # Look where the series is truncated right now (trunc1) and where in the step before (trunc0)
    trunc0 = 2+n*step
    trunc1 = 2+(n+1)*step

    # Apply Jackson kernel to new moments
    for n in range(trunc0, trunc1):
      mu1[n] = mu[n]*((trunc1-n+1)*cos(pi*n/(trunc1+1))+sin(pi*n/(trunc1+1))/tan(pi/(trunc1+1)))/(trunc1+1)

    # Calculate the new summands
    maxptp = 0.
    for e in range(trunc1*2):
      en = cos(pi*(2*e+1)/4/trunc1)
      #print 'en = %.2f' % en
      for n in range(trunc0, trunc1):
        summ[n-trunc0] = mu1[n]*cos(pi*n*(2*e+1)/4/trunc1)*2/pi/sqrt(1-en*en)

      # Calculate peak-to-peak value of summands
      ptpeak = ptp(summ, step)
      #print osumm
      #print ptpeak
      maxptp = dmax(maxptp, ptpeak)
      #if ptpeak > maxptp:
        #break

    if maxptp < tol:
      breakloop = 1
      break

  else:
    # Calculate rest of the moments (only if no break occured within the loop)
    for n in range(rest):
      muind = 2+nstep*step+n

      for i in range(enum):
        # Perform matrix-vector multiplication
        phi2[i] = 0. # Important, because content is different from zero after each loop
        for j in range(ptr[i], ptr[i+1]):
          phi2[i] += 2.*dat[j]*phi1[ind[j]]
        phi2[i] -= phi0[i]

        # Calculate moments, part 1/2
        mu[muind] += 2.*phi1[i]*phi1[i]
        mu[muind+1] += 2.*phi2[i]*phi1[i]

      # Calculate moments, part 2/2
      mu[muind] -= mu[0]
      mu[muind+1] -= mu[1]

      # Shift vectors (permute pointers circular)
      phitemp = phi0
      phi0 = phi1
      phi1 = phi2
      phi2 = phitemp

    # So then the maximum truncation number is reached
    trunc1 = limit

  # Apply kernel
  for n in range(trunc1):
    mu1[n] = mu[n]*((trunc1-n+1)*cos(pi*n/(trunc1+1))+sin(pi*n/(trunc1+1))/tan(pi/(trunc1+1)))/(trunc1+1)

  # Construct final LDOS
  for e in range(nenerg): #trunc1*2
    energ[e] = cos(pi*(2*e+1)/2/nenerg)
    rho1[e] = mu1[0]
    for n in range(1, trunc1):
      rho1[e] += mu1[n]*cos(n*pi*(2*e+1)/2/nenerg)*2
    rho1[e] /= pi*sqrt(1-energ[e]**2)

  #print omu1[:trunc1]#, sum(np.isnan(omu1[:trunc1]))
  #print 'final trunc =', trunc1

  # Return results
  return oenerg[::-1], orho1[::-1], omu1[:trunc1], trunc1
